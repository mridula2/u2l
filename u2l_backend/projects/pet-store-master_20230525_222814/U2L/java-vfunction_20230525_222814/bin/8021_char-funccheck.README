# $Header: /data/cvsrepo/assess-tools/bin/8021_char-funccheck.README,v 1.1 2014/02/24 07:52:34 sodo Exp $
# $Name: rev_1_10 $
#
ツール名　: 
　8021_char-funccheck

概要　　　: 
　STKの出力結果およびソースコードから
　memset,memcpy,strncpy関数で問題が発生する可能性が高い箇所を抽出する。

実行方法 : 
　# cd $srcdir
　# 8021_char-funccheck .
　
　※注意：入力ファイル「STK実行結果ログファイル」にはソースコードのファイルパス情報が含まれており
　　　　　本ツールはその情報をもとにソースコードを読み込みますが、
　　　　　パスはソースコード格納ディレクトリからの相対パスで記載されています。
　　　　　このため、ソースコード格納ディレクトリへcdで移動してから本ツールを実行してください。

オプション：
　<directory> : コメント除去されたソースコードがあるディレクトリパス
　（そのディレクトリへcdして.を引数にしてください）

標準出力　：
　なし

戻り値：
　0：正常終了
　1：引数の数が不正
　　 入力となるソースコードディレクトリが存在しない
　　 入力となるSTK実行結果ログファイルが存在しない
　　 入力となるSTK実行結果ログファイルが読み込めない
　　 出力ファイルのオープンに失敗


エラー出力：
　引数不正："Usage: $0 dir"
　入力ソースコードがない："Not found <dir>"
　入力となるSTKログが存在しない："Not found <STKlogfile>"
　入力となるSTKログが読み込めない："Can't open <STKlogfile>"
　出力ファイルのオープンに失敗："Cant open <outputfile>"
　
入力ファイル：
　$PJHOME/log/$APNAME/stk/allfunc_detail.txt：STK実行結果ログファイル
　
出力ファイル：
　$PJHOME/log/$APNAME/charinv/char-funccheck.out：目視が必要なソースコード、行番号、および関数の種別が記載されたファイル
　　出力フォーマット：
　　<ファイル名>:<行番号>:<内容>:<関数の種別>

　関数の種別は以下の10種類ある。（詳しい判別仕様は後述）
　　memset-01 :memsetの第二引数が「NULL(0x00,\0,0,(char *)0)」でないもの
　　memset-02 :memsetの第三引数が「sizeof(&xxx)」となっているもの
　　memset-03 :memsetの第三引数が「sizeof(NULL)」となっているもの
　　memset-04 :memsetの第三引数が「sizeof(小文字)」となっており、sizeofの中身が第一引数と異なるもの
　　memcpy-01 :memcpyの第三引数が「sizeof(&xxx)」となっているもの
　　memcpy-02 :memcpyの第三引数が「sizeof(NULL)」となっているもの
　　memcpy-03 :memcpyの第三引数が「sizeof(小文字)」となっており、sizeofの中身が第一引数、第二引数ともに異なるもの
　　strncpy-01:strncpyの第三引数が「sizeof(&xxx)」となっているもの
　　strncpy-02:strncpyの第三引数が「sizeof(NULL)」となっているもの
　　strncpy-03:strncpyの第三引数が「sizeof(小文字)」となっており、sizeofの中身が第一引数、第二引数ともに異なるもの

仕様：
　本スクリプトは、ソースコードディレクトリ以下から1行単位でファイル読み込みを行い、
　各行に含まれるmemset,memcpy,strncpy関数を検出し、かつ、以下のようなパターンの行を抽出する。

　パターン判定は下記の記載順で行われる。
　memset-01のパターンを検出した場合でも次のパターン判定を継続する。（memset-01と他のパターンを両方検出するため）
　それ以外のパターンを検出した場合はその行のパターン判定を停止し、次の行の読み込みを行う。

　[memset関数]
　　memset-01として抽出されるパターン：
		memset( aaa, ' ', sizeof( bbb ) );			# 第二引数がNULL((0x00,\0,0,(char *)0)でない
		memset( aaa, 0x20, sizeof( bbb ) );			# 第二引数がNULL((0x00,\0,0,(char *)0)でない

　　memset-01として抽出されないパターン：
		memset( aaa, NULL, sizeof( bbb ) );			# 第二引数がNULL((0x00,\0,0,(char *)0)である
		memset( aaa, 0x00, sizeof( bbb ) );			# 第二引数がNULL((0x00,\0,0,(char *)0)である

　　memset-02として抽出されるパターン：
		memset( aaa, XXXX, sizeof( &bbb ) );		# 第三引数がsizeofを使い、かつ、変数に&がついており、明らかにコーディングミスと思われる

　　memset-02として抽出されないパターン：
		memset( aaa, XXXX, sizeof( bbb ) );			# 第三引数がsizeofを使っているが変数に&がついていない

　　memset-03として抽出されるパターン：
		memset( aaa, XXXX, sizeof( NULL ) );		# 第三引数がsizeofを使い、かつ、NULLを指定しており、明らかにコーディングミスと思われる

　　memset-03として抽出されないパターン：
		memset( aaa, XXXX, sizeof( bbb ) );			# 第三引数がsizeofを使っているが中身がNULLではない

　　memset-04として抽出されるパターン：
		memset( aaa, XXXX, sizeof( bbb ) );			# 第三引数がsizeofを使い、かつ、変数名が小文字であり、変数名が第一引数と異なる

　　memset-04として抽出されないパターン：
		memset( aaa, XXXX, sizeof( IF_HEAD_DT ) );	# 第三引数がsizeofを使っているが中身が大文字
		memset( aaa, XXXX, sizeof( aaa ) );			# 第三引数がsizeofを使っていて中身が小文字だが、第一引数と同じ変数名である


　[memcpy関数]
　　memcpy-01として抽出されるパターン：
		memcpy( aaa, XXXX, sizeof( &bbb ) );		# 第三引数がsizeofを使い、かつ、変数に&がついており、明らかにコーディングミスと思われる

　　memcpy-01として抽出されないパターン：
		memcpy( aaa, XXXX, sizeof( bbb ) );			# 第三引数がsizeofを使っているが変数に&がついていない

　　memcpy-02として抽出されるパターン：
		memcpy( aaa, XXXX, sizeof( NULL ) );		# 第三引数がsizeofを使い、かつ、NULLを指定しており、明らかにコーディングミスと思われる

　　memcpy-02として抽出されないパターン：
		memcpy( aaa, XXXX, sizeof( bbb ) );			# 第三引数がsizeofを使っているが中身がNULLではない

　　memcpy-03として抽出されるパターン：
		memcpy( aaa, bbb, sizeof( ccc ) );			# 第三引数がsizeofを使い、かつ、変数名cccが小文字であり、変数名が第一引数aaaとも第二引数bbbとも異なる

　　memcpy-03として抽出されないパターン：
		memcpy( aaa, bbb, sizeof( IF_HEAD_DT ) );	# 第三引数がsizeofを使っているが中身が大文字
		memcpy( aaa, bbb, sizeof( aaa ) );			# 第三引数がsizeofを使っていて中身が小文字だが、第一引数と同じ変数名である
		memcpy( aaa, bbb, sizeof( bbb ) );			# 第三引数がsizeofを使っていて中身が小文字だが、第二引数と同じ変数名である


　[strncpy関数]
　　strncpy-01として抽出されるパターン：
		strncpy( aaa, XXXX, sizeof( &bbb ) );		# 第三引数がsizeofを使い、かつ、変数に&がついており、明らかにコーディングミスと思われる

　　strncpy-01として抽出されないパターン：
		strncpy( aaa, XXXX, sizeof( bbb ) );		# 第三引数がsizeofを使っているが変数に&がついていない

　　strncpy-02として抽出されるパターン：
		strncpy( aaa, XXXX, sizeof( NULL ) );		# 第三引数がsizeofを使い、かつ、NULLを指定しており、明らかにコーディングミスと思われる

　　strncpy-02として抽出されないパターン：
		strncpy( aaa, XXXX, sizeof( bbb ) );		# 第三引数がsizeofを使っているが中身がNULLではない

　　strncpy-03として抽出されるパターン：
		strncpy( aaa, bbb, sizeof( ccc ) );			# 第三引数がsizeofを使い、かつ、変数名cccが小文字であり、変数名が第一引数aaaとも第二引数bbbとも異なる

　　strncpy-03として抽出されないパターン：
		strncpy( aaa, bbb, sizeof( IF_HEAD_DT ) );	# 第三引数がsizeofを使っているが中身が大文字
		strncpy( aaa, bbb, sizeof( aaa ) );			# 第三引数がsizeofを使っていて中身が小文字だが、第一引数と同じ変数名である
		strncpy( aaa, bbb, sizeof( bbb ) );			# 第三引数がsizeofを使っていて中身が小文字だが、第二引数と同じ変数名である



