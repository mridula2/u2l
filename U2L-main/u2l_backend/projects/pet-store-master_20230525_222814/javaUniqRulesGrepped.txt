Binary file /usr/u2l/u2l_backend/projects/pet-store-master_20230525_222814/Java/JavaRules/JavaCommonRules/JDKDeprecatedList.rules matches
IC_ASRVDEP_001	javax.servlet.http.HttpSessionContext	javax.servlet.http	HttpSessionContext	As of Java(tm) Servlet API 2.1 for security reasons, with no replacement. This interface will be removed in a future version of this API.
IC_ASRVDEP_002	javax.servlet.SingleThreadModel	javax.servlet	SingleThreadModel	As of Java Servlet API 2.4, with no direct replacement.
IC_ASRVDEP_003	javax.servlet.http.HttpUtils	javax.servlet.http	HttpUtils	As of Java(tm) Servlet API 2.3. These methods were only useful with the default encoding and have been moved to the request interfaces.
IC_ASRVDEP_004	javax.servlet.http.HttpServletResponseWrapper.encodeRedirectUrl(String)	javax.servlet.http.HttpServletResponseWrapper	encodeRedirectUrl(String)	As of Version 3.0 of the Java Servlet API
IC_ASRVDEP_005	javax.servlet.http.HttpServletResponse.encodeRedirectUrl(String)	javax.servlet.http.HttpServletResponse	encodeRedirectUrl(String)	As of version 2.1, use encodeRedirectURL(String url) instead
IC_ASRVDEP_006	javax.servlet.http.HttpServletResponseWrapper.encodeUrl(String)	javax.servlet.http.HttpServletResponseWrapper	encodeUrl(String)	As of Version 3.0 of the Java Servlet API
IC_ASRVDEP_007	javax.servlet.http.HttpServletResponse.encodeUrl(String)	javax.servlet.http.HttpServletResponse	encodeUrl(String)	As of version 2.1, use encodeURL(String url) instead
IC_ASRVDEP_008	javax.servlet.http.HttpSessionContext.getIds()	javax.servlet.http.HttpSessionContext	getIds()	As of Java Servlet API 2.1 with no replacement. This method must return an empty Enumeration and will be removed in a future version of this API.
IC_ASRVDEP_009	javax.servlet.ServletRequestWrapper.getRealPath(String)	javax.servlet.ServletRequestWrapper	getRealPath(String)	As of Version 3.0 of the Java Servlet API
IC_ASRVDEP_010	javax.servlet.ServletRequest.getRealPath(String)	javax.servlet.ServletRequest	getRealPath(String)	As of Version 2.1 of the Java Servlet API, use ServletContext.getRealPath(java.lang.String) instead.
IC_ASRVDEP_011	javax.servlet.UnavailableException.getServlet()	javax.servlet.UnavailableException	getServlet()	As of Java Servlet API 2.2, with no replacement.
IC_ASRVDEP_012	javax.servlet.ServletContext.getServlet(String)	javax.servlet.ServletContext	getServlet(String)	As of Java Servlet API 2.1, with no direct replacement. This method was originally defined to retrieve a servlet from a ServletContext. In this version, this method always returns null and remains only to preserve In lieu of this method, servlets can share information using the ServletContext class and can perform shared business logic by invoking methods on common non-servlet classes.binary compatibility. This method will be permanently removed in a future version of the Java Servlet API.
IC_ASRVDEP_013	javax.servlet.ServletContext.getServletNames()	javax.servlet.ServletContext	getServletNames()	As of Java Servlet API 2.1, with no replacement. This method was originally defined to return an Enumeration of all the servlet names known to this context. In this version, this method always returns an empty Enumeration and remains only to preserve binary compatibility. This method will be permanently removed in a future version of the Java Servlet API.
IC_ASRVDEP_014	javax.servlet.ServletContext.getServlets()	javax.servlet.ServletContext	getServlets()	As of Java Servlet API 2.0, with no replacement. This method was originally defined to return an Enumeration of all the servlets known to this servlet context. In this version, this method always returns an empty enumeration and remains only to preserve binary compatibility. This method will be permanently removed in a future version of the Java Servlet API.
IC_ASRVDEP_015	javax.servlet.http.HttpSessionContext.getSession(String)	javax.servlet.http.HttpSessionContext	getSession(String)	As of Java Servlet API 2.1 with no replacement. This method must return null and will be removed in a future version of this API.
IC_ASRVDEP_016	javax.servlet.http.HttpSession.getSessionContext()	javax.servlet.http.HttpSession	getSessionContext()	As of Version 2.1, this method is deprecated and has no replacement. It will be removed in a future version of the Java Servlet API.
IC_ASRVDEP_017	javax.servlet.http.HttpSession.getValue(String)	javax.servlet.http.HttpSession	getValue(String)	As of Version 2.2, this method is replaced by HttpSession.getAttribute(java.lang.String).
IC_ASRVDEP_018	javax.servlet.http.HttpSession.getValueNames()	javax.servlet.http.HttpSession	getValueNames()	As of Version 2.2, this method is replaced by HttpSession.getAttributeNames()
IC_ASRVDEP_019	javax.servlet.http.HttpServletRequestWrapper.isRequestedSessionIdFromUrl()	javax.servlet.http.HttpServletRequestWrapper	isRequestedSessionIdFromUrl()	As of Version 3.0 of the Java Servlet API
IC_ASRVDEP_020	javax.servlet.http.HttpServletRequest.isRequestedSessionIdFromUrl()	javax.servlet.http.HttpServletRequest	isRequestedSessionIdFromUrl()	As of Version 2.1 of the Java Servlet API, use HttpServletRequest.isRequestedSessionIdFromURL() instead.
IC_ASRVDEP_021	javax.servlet.ServletContext.log(Exception, String)	javax.servlet.ServletContext	log(Exception, String)	As of Java Servlet API 2.1, use ServletContext.log(String message, Throwable throwable) instead. This method was originally defined to write an exception's stack trace and an explanatory error message to the servlet log file.
IC_ASRVDEP_022	javax.servlet.http.HttpSession.putValue(String, Object)	javax.servlet.http.HttpSession	putValue(String, Object)	As of Version 2.2, this method is replaced by HttpSession.setAttribute(java.lang.String, java.lang.Object)
IC_ASRVDEP_023	javax.servlet.http.HttpSession.removeValue(String)	javax.servlet.http.HttpSession	removeValue(String)	As of Version 2.2, this method is replaced by HttpSession.removeAttribute(java.lang.String)
IC_ASRVDEP_024	javax.servlet.http.HttpServletResponseWrapper.setStatus(int, String)	javax.servlet.http.HttpServletResponseWrapper	setStatus(int, String)	As of Version 3.0 of the Java Servlet API
IC_ASRVDEP_025	javax.servlet.http.HttpServletResponse.setStatus(int, String)	javax.servlet.http.HttpServletResponse	setStatus(int, String)	As of version 2.1, due to ambiguous meaning of the message parameter. To set a status code use setStatus(int), to send an error with a description use sendError(int, String).
IC_ASRVDEP_026	javax.servlet.UnavailableException(int, Servlet, String)	javax.servlet	UnavailableException(int, Servlet, String)	As of Java Servlet API 2.2, use UnavailableException.UnavailableException(String, int) instead.
IC_ASRVDEP_027	javax.servlet.UnavailableException(Servlet, String)	javax.servlet	UnavailableException(Servlet, String)	As of Java Servlet API 2.2, use UnavailableException.UnavailableException(String) instead
IC_JDDAT_9211	java.util.jar.Attributes.Name.EXTENSION_INSTALLATION	java.util.jar.Attributes.Name	EXTENSION_INSTALLATION	Extension mechanism is no longer supported.	
IC_JDDC_5024	java.security.Identity	java.security	Identity	"This class is no longer used. Its functionality has been replaced by java.security.KeyStore, the java.security.cert package, and java.security.Principal."	
IC_JDDC_5025	java.security.IdentityScope	java.security	IdentityScope	"This class is no longer used. Its functionality has been replaced by java.security.KeyStore, the java.security.cert package, and java.security.Principal."	
IC_JDDC_5026	java.io.LineNumberInputStream	java.io	LineNumberInputStream	"This class incorrectly assumes that bytes adequately represent characters. As of JDK 1.1, the preferred way to operate on character streams is via the new character-stream classes, which include a class for counting line numbers."	
IC_JDDC_5032	java.security.Signer	java.security	Signer	"This class is no longer used. Its functionality has been replaced by java.security.KeyStore, the java.security.cert package, and java.security.Principal."	
IC_JDDC_5033	java.io.StringBufferInputStream	java.io	StringBufferInputStream	"This class does not properly convert characters into bytes. As of JDK 1.1, the preferred way to create a stream from a string is via the StringReader class."	
IC_JDDC_8034	java.util.jar.Pack200	java.util.jar	Pack200	This class is deprecated	 and is planned for removal in a future release.
IC_JDDC_9152	java.security.Signer	java.security	Signer	"This class is no longer used. Its functionality has been replaced by java.security.KeyStore, the java.security.cert package, and java.security.Principal."	
IC_JDDC_9160	java.io.StringBufferInputStream	java.io	StringBufferInputStream	"This class does not properly convert characters into bytes. As of JDK 1.1, the preferred way to create a stream from a string is via the StringReader class."	
IC_JDDC_XIX005	java.util.Locale(String)	java.util	Locale(String)	Locale constructors have been deprecated. See Obtaining a Locale for other options.	
IC_JDDC_XIX006	"java.util.Locale(String, String)"	java.util	"Locale(String, String)"	Locale constructors have been deprecated. See Obtaining a Locale for other options.	
IC_JDDC_XIX007	"java.util.Locale(String, String, String)"	java.util	"Locale(String, String, String)"	Locale constructors have been deprecated. See Obtaining a Locale for other options.	
IC_JDDC_XV056	"java.util.Date?(int, int, int, int, int)"	java.util	"Date?(int, int, int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min) or GregorianCalendar(year + 1900, month, date, hrs, min)."	
IC_JDDC_XV057	"java.util.Date?(int, int, int, int, int, int)"	java.util	"Date?(int, int, int, int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec)."	
IC_JDDC_XV058	java.util.Date?(String)	java.util	Date?(String)	"As of JDK version 1.1, replaced by DateFormat.parse(String s)."	
IC_JDDC_XV059	"java.net.Socket?(InetAddress, int, boolean)"	java.util	"Socket?(InetAddress, int, boolean)"	Use DatagramSocket instead for UDP transport.	
IC_JDDC_XVIII004	"javax.security.auth.Subject.doAs(Subject, PrivilegedAction<T>)"	javax.security.auth.Subject	"doAs(Subject, PrivilegedAction<T>)"	"This method depends on AccessControlContext which, in conjunction with the Security Manager, is deprecated and subject to removal in a future release. However, performing work as a Subject is useful independent of the Security Manager. Thus, a replacement API named Subject.callAs(javax.security.auth.Subject, java.util.concurrent.Callable<T>) has been added which can be used to perform the same work."	
IC_JDDC_XVIII005	"javax.security.auth.Subject.doAs(Subject, PrivilegedExceptionAction<T>)"	javax.security.auth.Subject	"doAs(Subject, PrivilegedExceptionAction<T>)"	"This method depends on AccessControlContext which, in conjunction with the Security Manager, is deprecated and subject to removal in a future release. However, performing work as a Subject is useful independent of the Security Manager. Thus, a replacement API named Subject.callAs(javax.security.auth.Subject, java.util.concurrent.Callable<T>) has been added which can be used to perform the same work."	
IC_JDDF_6060	java.util.logging.Logger.global	java.util.logging.Logger	global	"Initialization of this field is prone to deadlocks. The field must be initialized by the Logger class initialization which may cause deadlocks with the LogManager class initialization. In such cases two class initialization wait for each other to complete. As of JDK version 1.6, the preferred way to get the global logger object is via the call Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)."	
IC_JDDF_7045	javax.sql.rowset.CachedRowSet.COMMIT_ON_ACCEPT_CHANGES	javax.sql.rowset.CachedRowSet	COMMIT_ON_ACCEPT_CHANGES	"Because this field is final (it is part of an interface), its value cannot be changed."	
IC_JDDF_8060	java.util.jar.Attributes.Name.EXTENSION_INSTALLATION	java.util.jar.Attributes.Name	EXTENSION_INSTALLATION	Extension mechanism will be removed in a future release. Use class path instead.	
IC_JDDF_8065	java.util.jar.Attributes.Name.IMPLEMENTATION_URL	java.util.jar.Attributes.Name	IMPLEMENTATION_URL	Extension mechanism will be removed in a future release. Use class path instead.	
IC_JDDF_8066	java.util.jar.Attributes.Name.IMPLEMENTATION_VENDOR_ID	java.util.jar.Attributes.Name	IMPLEMENTATION_VENDOR_ID	Extension mechanism will be removed in a future release. Use class path instead.	
IC_JDDF_9196	javax.sql.rowset.CachedRowSet.COMMIT_ON_ACCEPT_CHANGES	javax.sql.rowset.CachedRowSet	COMMIT_ON_ACCEPT_CHANGES	"Because this field is final (it is part of an interface), its value cannot be changed."	
IC_JDDF_9212	java.util.logging.Logger.global	java.util.logging.Logger	global	"Initialization of this field is prone to deadlocks. The field must be initialized by the Logger class initialization which may cause deadlocks with the LogManager class initialization. In such cases two class initialization wait for each other to complete. The preferred way to get the global logger object is via the call Logger.getGlobal(). For compatibility with old JDK versions where the Logger.getGlobal() is not available use the call Logger.getLogger(Logger.GLOBAL_LOGGER_NAME) or Logger.getLogger(""global"")."	
IC_JDDF_9216	java.util.jar.Attributes.Name.IMPLEMENTATION_URL	java.util.jar.Attributes.Name	IMPLEMENTATION_URL	Extension mechanism is no longer supported.	
IC_JDDF_9217	java.util.jar.Attributes.Name.IMPLEMENTATION_VENDOR_ID	java.util.jar.Attributes.Name	IMPLEMENTATION_VENDOR_ID	Extension mechanism is no longer supported.	
IC_JDDF_9248	java.math.BigDecimal.ROUND_CEILING	java.math.BigDecimal	ROUND_CEILING	Use RoundingMode.CEILING instead.	
IC_JDDF_9249	java.math.BigDecimal.ROUND_DOWN	java.math.BigDecimal	ROUND_DOWN	Use RoundingMode.DOWN instead.	
IC_JDDF_9250	java.math.BigDecimal.ROUND_FLOOR	java.math.BigDecimal	ROUND_FLOOR	Use RoundingMode.FLOOR instead.	
IC_JDDF_9251	java.math.BigDecimal.ROUND_HALF_DOWN	java.math.BigDecimal	ROUND_HALF_DOWN	Use RoundingMode.HALF_DOWN instead.	
IC_JDDF_9252	java.math.BigDecimal.ROUND_HALF_EVEN	java.math.BigDecimal	ROUND_HALF_EVEN	Use RoundingMode.HALF_EVEN instead.	
IC_JDDF_9253	java.math.BigDecimal.ROUND_HALF_UP	java.math.BigDecimal	ROUND_HALF_UP	Use RoundingMode.HALF_UP instead.	
IC_JDDF_9254	java.math.BigDecimal.ROUND_UNNECESSARY	java.math.BigDecimal	ROUND_UNNECESSARY	Use RoundingMode.UNNECESSARY instead.	
IC_JDDF_9255	java.math.BigDecimal.ROUND_UP	java.math.BigDecimal	ROUND_UP	Use RoundingMode.UP instead.	
IC_JDDF_XVII012	java.io.WriteAbortedException.detail	java.io.WriteAbortedException	detail	This field predates the general-purpose exception chaining facility. The Throwable.getCause() method is now the preferred means of obtaining this information.	
IC_JDDI_5009	org.omg.CORBA.DynStruct	org.omg.CORBA	DynStruct	Use the new DynStruct instead	
IC_JDDI_9090	java.util.logging.LoggingMXBean	java.util.logging	LoggingMXBean	LoggingMXBean is no longer a platform MXBean and is replaced with PlatformLoggingMXBean. It will not register in the platform MBeanServer. Use ManagementFactory.getPlatformMXBean(PlatformLoggingMXBean.class) instead.	
IC_JDDI_9093	java.util.Observer	java.util	Observer	This interface has been deprecated. See the Observable class for further information.	
IC_JDDI_9132	java.security.Identity	java.security	Identity	"This class is no longer used. Its functionality has been replaced by java.security.KeyStore, the java.security.cert package, and java.security.Principal."	
IC_JDDI_9133	java.security.IdentityScope	java.security	IdentityScope	"This class is no longer used. Its functionality has been replaced by java.security.KeyStore, the java.security.cert package, and java.security.Principal."	
IC_JDDI_9136	java.io.LineNumberInputStream	java.io	LineNumberInputStream	"This class incorrectly assumes that bytes adequately represent characters. As of JDK 1.1, the preferred way to operate on character streams is via the new character-stream classes, which include a class for counting line numbers."	
IC_JDDI_9142	java.util.Observable	java.util	Observable	"This class and the Observer interface have been deprecated. The event model supported by Observer and Observable is quite limited, the order of notifications delivered by Observable is unspecified, and state changes are not in one-for-one correspondence with notifications. For a richer event model, consider using the java.beans package. For reliable and ordered messaging among threads, consider using one of the concurrent data structures in the java.util.concurrent package. For reactive streams style programming, see the Flow API."	
IC_JDDI_X137	org.omg.CORBA.DynStruct	org.omg.CORBA	DynStruct	Use the new DynStruct instead	
IC_JDDM_5174	java.util.Date.getDate()	java.util.Date	getDate()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_MONTH)."	
IC_JDDM_5175	java.util.Date.getDay()	java.util.Date	getDay()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_WEEK)."	
IC_JDDM_5195	java.util.Date.getHours()	java.util.Date	getHours()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.HOUR_OF_DAY)."	
IC_JDDM_5206	java.util.Date.getMinutes()	java.util.Date	getMinutes()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.MINUTE)."	
IC_JDDM_5207	java.util.Date.getMonth()	java.util.Date	getMonth()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.MONTH)."	
IC_JDDM_5213	java.awt.ComponentOrientation.getOrientation(ResourceBundle)	java.awt.ComponentOrientation	getOrientation(ResourceBundle)	"As of J2SE 1.4, use ComponentOrientation.getOrientation(java.util.Locale)."	
IC_JDDM_5221	java.util.Date.getSeconds()	java.util.Date	getSeconds()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.SECOND)."	
IC_JDDM_5228	java.util.Date.getTimezoneOffset()	java.util.Date	getTimezoneOffset()	"As of JDK version 1.1, replaced by -(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)."	
IC_JDDM_5235	java.util.Date.getYear()	java.util.Date	getYear()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.YEAR) - 1900."	
IC_JDDM_5295	java.util.Date.parse(String)	java.util.Date	parse(String)	"As of JDK version 1.1, replaced by DateFormat.parse(String s)."	
IC_JDDM_5311	java.io.DataInputStream.readLine()	java.io.DataInputStream	readLine()	"This method does not properly convert bytes to characters. As of JDK 1.1, the preferred way to read lines of text is via the BufferedReader.readLine() method. Programs that use the DataInputStream class to read lines can be converted to use the BufferedReader class by replacing code of the form
IC_JDDM_5312	java.io.ObjectInputStream.readLine()	java.io.ObjectInputStream	readLine()	This method does not properly convert bytes to characters. see DataInputStream for the details and alternatives.	
IC_JDDM_5331	"java.util.Properties.save(OutputStream, String)"	java.util.Properties	"save(OutputStream, String)"	"This method does not throw an IOException if an I/O error occurs while saving the property list. The preferred way to save a properties list is via the store(OutputStream out, String comments) method or the storeToXML(OutputStream os, String comment) method."	
IC_JDDM_5336	java.util.Date.setDate(int)	java.util.Date	setDate(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.DAY_OF_MONTH, int date)."	
IC_JDDM_5340	java.util.Date.setHours(int)	java.util.Date	setHours(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.HOUR_OF_DAY, int hours)."	
IC_JDDM_5346	java.util.Date.setMinutes(int)	java.util.Date	setMinutes(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.MINUTE, int minutes)."	
IC_JDDM_5348	java.util.Date.setMonth(int)	java.util.Date	setMonth(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.MONTH, int month)."	
IC_JDDM_5357	java.util.Date.setSeconds(int)	java.util.Date	setSeconds(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.SECOND, int seconds)."	
IC_JDDM_5362	"javax.sql.rowset.BaseRowSet.setUnicodeStream(int, InputStream, int)"	javax.sql.rowset.BaseRowSet	"setUnicodeStream(int, InputStream, int)"	getCharacterStream should be used in its place	
IC_JDDM_5364	java.util.Date.setYear(int)	java.util.Date	setYear(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.YEAR, year + 1900)."	
IC_JDDM_5376	java.util.Date.toGMTString()	java.util.Date	toGMTString()	"As of JDK version 1.1, replaced by DateFormat.format(Date date), using a GMT TimeZone."	
IC_JDDM_5377	java.util.Date.toLocaleString()	java.util.Date	toLocaleString()	"As of JDK version 1.1, replaced by DateFormat.format(Date date)."	
IC_JDDM_5380	java.io.ByteArrayOutputStream.toString(int)	java.io.ByteArrayOutputStream	toString(int)	"This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the toString(String enc) method, which takes an encoding-name argument, or the toString() method, which uses the platform's default character encoding."	
IC_JDDM_5381	"java.util.Date.UTC(int, int, int, int, int, int)"	java.util.Date	"UTC(int, int, int, int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec), using a UTC TimeZone, followed by Calendar.getTime().getTime()."	
IC_JDDM_5385	java.io.ObjectOutputStream.PutField.write(ObjectOutput)	java.io.ObjectOutputStream.PutField	write(ObjectOutput)	"This method does not write the values contained by this PutField object in a proper format, and may result in corruption of the serialization stream. The correct way to write PutField data is by calling the ObjectOutputStream.writeFields() method."	
IC_JDDM_5388	"java.util.Date(int, int, int)"	java.util	"Date(int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date) or GregorianCalendar(year + 1900, month, date)."	
IC_JDDM_5389	"java.util.Date(int, int, int, int, int)"	java.util	"Date(int, int, int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min) or GregorianCalendar(year + 1900, month, date, hrs, min)."	
IC_JDDM_5390	"java.util.Date(int, int, int, int, int, int)"	java.util	"Date(int, int, int, int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec)."	
IC_JDDM_5391	java.util.Date(String)	java.util	Date(String)	"As of JDK version 1.1, replaced by DateFormat.parse(String s)."	
IC_JDDM_5400	java.io.StreamTokenizer(InputStream)	java.io	StreamTokenizer(InputStream)	"As of JDK version 1.1, the preferred way to tokenize an input stream is to convert it into a character stream, for example
IC_JDDM_6402	java.io.File.toURL()	java.io.File	toURL()	"This method does not automatically escape characters that are illegal in URLs. It is recommended that new code convert an abstract pathname into a URL by first converting it into a URI, via the toURI method, and then converting the URI into a URL via the URI.toURL method."	
IC_JDDM_8111	java.util.jar.Pack200.Packer.addPropertyChangeListener(PropertyChangeListener)	java.util.jar.Pack200.Packer	addPropertyChangeListener(PropertyChangeListener)	The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. Applications that need to monitor progress of the packer can poll the value of the PROGRESS property instead.	
IC_JDDM_8112	java.util.jar.Pack200.Unpacker.addPropertyChangeListener(PropertyChangeListener)	java.util.jar.Pack200.Unpacker	addPropertyChangeListener(PropertyChangeListener)	The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. Applications that need to monitor progress of the unpacker can poll the value of the PROGRESS property instead.	
IC_JDDM_8113	java.util.logging.LogManager.addPropertyChangeListener(PropertyChangeListener)	java.util.logging.LogManager	addPropertyChangeListener(PropertyChangeListener)	The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. The global LogManager can detect changes to the logging configuration by overridding the readConfiguration method.	
IC_JDDM_8186	java.rmi.server.UnicastRemoteObject.exportObject(Remote)	java.rmi.server.UnicastRemoteObject	exportObject(Remote)	"This method is deprecated because it supports only static stubs. Use exportObject(Remote, port) or exportObject(Remote, port, csf, ssf) instead."	
IC_JDDM_8303	"java.util.logging.Logger.logrb(Level, String, String, String, String)"	java.util.logging.Logger	"logrb(Level, String, String, String, String)"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead."	
IC_JDDM_8304	"java.util.logging.Logger.logrb(Level, String, String, String, String, Object)"	java.util.logging.Logger	"logrb(Level, String, String, String, String, Object)"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead"	
IC_JDDM_8305	"java.util.logging.Logger.logrb(Level, String, String, String, String, Object[])"	java.util.logging.Logger	"logrb(Level, String, String, String, String, Object[])"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead."	
IC_JDDM_8306	"java.util.logging.Logger.logrb(Level, String, String, String, String, Throwable)"	java.util.logging.Logger	"logrb(Level, String, String, String, String, Throwable)"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Throwable) instead."	
IC_JDDM_8357	java.util.jar.Pack200.Packer.removePropertyChangeListener(PropertyChangeListener)	java.util.jar.Pack200.Packer	removePropertyChangeListener(PropertyChangeListener)	The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release.	
IC_JDDM_8358	java.util.jar.Pack200.Unpacker.removePropertyChangeListener(PropertyChangeListener)	java.util.jar.Pack200.Unpacker	removePropertyChangeListener(PropertyChangeListener)	The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release.	
IC_JDDM_8359	java.util.logging.LogManager.removePropertyChangeListener(PropertyChangeListener)	java.util.logging.LogManager	removePropertyChangeListener(PropertyChangeListener)	The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. The global LogManager can detect changes to the logging configuration by overridding the readConfiguration method.	
IC_JDDM_9337	"java.math.BigDecimal.divide(BigDecimal, int)"	java.math.BigDecimal	"divide(BigDecimal, int)"	"The method BigDecimal.divide(BigDecimal, RoundingMode) should be used in preference to this legacy method."	
IC_JDDM_9338	"java.math.BigDecimal.divide(BigDecimal, int, int)"	java.math.BigDecimal	"divide(BigDecimal, int, int)"	"The method BigDecimal.divide(BigDecimal, int, RoundingMode) should be used in preference to this legacy method."	
IC_JDDM_9365	java.rmi.server.UnicastRemoteObject.exportObject(Remote)	java.rmi.server.UnicastRemoteObject	exportObject(Remote)	"This method is deprecated because it supports only static stubs. Use exportObject(Remote, port) or exportObject(Remote, port, csf, ssf) instead."	
IC_JDDM_9372	java.io.FileInputStream.finalize()	java.io.FileInputStream	finalize()	"The finalize method has been deprecated. Subclasses that override finalize in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding finalize method. When overriding the finalize method, its implementation must explicitly ensure that super.finalize() is invoked as described in Object.finalize(). See the specification for Object.finalize() for further information about migration options."	
IC_JDDM_9373	java.io.FileOutputStream.finalize()	java.io.FileOutputStream	finalize()	"The finalize method has been deprecated. Subclasses that override finalize in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding finalize method. When overriding the finalize method, its implementation must explicitly ensure that super.finalize() is invoked as described in Object.finalize(). See the specification for Object.finalize() for further information about migration options."	
IC_JDDM_9375	java.util.concurrent.ThreadPoolExecutor.finalize()	java.util.concurrent.ThreadPoolExecutor	finalize()	"The finalize method has been deprecated. Subclasses that override finalize in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding finalize method. When overriding the finalize method, its implementation must explicitly ensure that super.finalize() is invoked as described in Object.finalize(). See the specification for Object.finalize() for further information about migration options."	
IC_JDDM_9376	java.util.zip.Deflater.finalize()	java.util.zip.Deflater	finalize()	"The finalize method has been deprecated. Subclasses that override finalize in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding finalize method. When overriding the finalize method, its implementation must explicitly ensure that super.finalize() is invoked as described in Object.finalize(). See the specification for Object.finalize() for further information about migration options."	
IC_JDDM_9377	java.util.zip.Inflater.finalize()	java.util.zip.Inflater	finalize()	"The finalize method has been deprecated. Subclasses that override finalize in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding finalize method. When overriding the finalize method, its implementation must explicitly ensure that super.finalize() is invoked as described in Object.finalize(). See the specification for Object.finalize() for further information about migration options."	
IC_JDDM_9378	java.util.zip.ZipFile.finalize()	java.util.zip.ZipFile	finalize()	"The finalize method has been deprecated. Subclasses that override finalize in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding finalize method. When overriding the finalize method, its implementation must explicitly ensure that super.finalize() is invoked as described in Object.finalize(). See the specification for Object.finalize() for further information about migration options."	
IC_JDDM_9400	java.util.Date.getDate()	java.util.Date	getDate()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_MONTH)."	
IC_JDDM_9402	java.util.Date.getDay()	java.util.Date	getDay()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.DAY_OF_WEEK)."	
IC_JDDM_9405	"jdk.nashorn.api.scripting.AbstractJSObject.getDefaultValue(JSObject, Class<?>)"	jdk.nashorn.api.scripting.AbstractJSObject	"getDefaultValue(JSObject, Class<?>)"	use JSObject.getDefaultValue(Class) instead.	
IC_JDDM_9424	java.util.Date.getHours()	java.util.Date	getHours()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.HOUR_OF_DAY)."	
IC_JDDM_9434	java.util.logging.LogManager.getLoggingMXBean()	java.util.logging.LogManager	getLoggingMXBean()	java.util.logging.LoggingMXBean is deprecated and replaced with java.lang.management.PlatformLoggingMXBean. Use ManagementFactory.getPlatformMXBean(PlatformLoggingMXBean.class) instead.	
IC_JDDM_9440	java.util.Date.getMinutes()	java.util.Date	getMinutes()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.MINUTE)."	
IC_JDDM_9443	java.util.Date.getMonth()	java.util.Date	getMonth()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.MONTH)."	
IC_JDDM_9451	java.awt.ComponentOrientation.getOrientation(ResourceBundle)	java.awt.ComponentOrientation	getOrientation(ResourceBundle)	"As of J2SE 1.4, use ComponentOrientation.getOrientation(java.util.Locale)."	
IC_JDDM_9465	java.sql.Date.getSeconds()	java.sql.Date	getSeconds()	java.util.Date.getSeconds()	
IC_JDDM_9466	java.util.Date.getSeconds()	java.util.Date	getSeconds()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.SECOND)."	
IC_JDDM_9478	java.util.Date.getTimezoneOffset()	java.util.Date	getTimezoneOffset()	"As of JDK version 1.1, replaced by -(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)."	
IC_JDDM_9489	java.util.Date.getYear()	java.util.Date	getYear()	"As of JDK version 1.1, replaced by Calendar.get(Calendar.YEAR) - 1900."	
IC_JDDM_9535	"java.util.logging.Logger.logrb(Level, String, String, String, String)"	java.util.logging.Logger	"logrb(Level, String, String, String, String)"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead."	
IC_JDDM_9536	"java.util.logging.Logger.logrb(Level, String, String, String, String, Object)"	java.util.logging.Logger	"logrb(Level, String, String, String, String, Object)"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead"	
IC_JDDM_9537	"java.util.logging.Logger.logrb(Level, String, String, String, String, Object[])"	java.util.logging.Logger	"logrb(Level, String, String, String, String, Object[])"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead."	
IC_JDDM_9538	"java.util.logging.Logger.logrb(Level, String, String, String, String, Throwable)"	java.util.logging.Logger	"logrb(Level, String, String, String, String, Throwable)"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Throwable) instead."	
IC_JDDM_9582	java.util.Date.parse(String)	java.util.Date	parse(String)	"As of JDK version 1.1, replaced by DateFormat.parse(String s)."	
IC_JDDM_9598	java.io.DataInputStream.readLine()	java.io.DataInputStream	readLine()	"This method does not properly convert bytes to characters. As of JDK 1.1, the preferred way to read lines of text is via the BufferedReader.readLine() method. Programs that use the DataInputStream class to read lines can be converted to use the BufferedReader class by replacing code of the form
IC_JDDM_9599	java.io.ObjectInputStream.readLine()	java.io.ObjectInputStream	readLine()	This method does not properly convert bytes to characters. see DataInputStream for the details and alternatives.	
IC_JDDM_9620	"java.util.Properties.save(OutputStream, String)"	java.util.Properties	"save(OutputStream, String)"	"This method does not throw an IOException if an I/O error occurs while saving the property list. The preferred way to save a properties list is via the store(OutputStream out, String comments) method or the storeToXML(OutputStream os, String comment) method."	
IC_JDDM_9627	java.util.Date.setDate(int)	java.util.Date	setDate(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.DAY_OF_MONTH, int date)."	
IC_JDDM_9633	java.util.Date.setHours(int)	java.util.Date	setHours(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.HOUR_OF_DAY, int hours)."	
IC_JDDM_9642	java.util.logging.LogRecord.setMillis(long)	java.util.logging.LogRecord	setMillis(long)	"LogRecord maintains timestamps with nanosecond resolution, using Instant values. For this reason, setInstant() should be used in preference to setMillis()."	
IC_JDDM_9644	java.util.Date.setMinutes(int)	java.util.Date	setMinutes(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.MINUTE, int minutes)."	
IC_JDDM_9647	java.util.Date.setMonth(int)	java.util.Date	setMonth(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.MONTH, int month)."	
IC_JDDM_9657	"java.math.BigDecimal.setScale(int, int)"	java.math.BigDecimal	"setScale(int, int)"	"The method BigDecimal.setScale(int, RoundingMode) should be used in preference to this legacy method."	
IC_JDDM_9659	java.util.Date.setSeconds(int)	java.util.Date	setSeconds(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.SECOND, int seconds)."	
IC_JDDM_9665	"javax.sql.rowset.BaseRowSet.setUnicodeStream(int, InputStream, int)"	javax.sql.rowset.BaseRowSet	"setUnicodeStream(int, InputStream, int)"	getCharacterStream should be used in its place	
IC_JDDM_9669	java.util.Date.setYear(int)	java.util.Date	setYear(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.YEAR, year + 1900)."	
IC_JDDM_9688	java.util.Date.toGMTString()	java.util.Date	toGMTString()	"As of JDK version 1.1, replaced by DateFormat.format(Date date), using a GMT TimeZone."	
IC_JDDM_9689	java.util.Date.toLocaleString()	java.util.Date	toLocaleString()	"As of JDK version 1.1, replaced by DateFormat.format(Date date)."	
IC_JDDM_9690	jdk.nashorn.api.scripting.AbstractJSObject.toNumber()	jdk.nashorn.api.scripting.AbstractJSObject	toNumber()	use JSObject.getDefaultValue(Class) with Number hint instead.	
IC_JDDM_9693	java.io.ByteArrayOutputStream.toString(int)	java.io.ByteArrayOutputStream	toString(int)	"This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the toString(String enc) method, which takes an encoding-name argument, or the toString() method, which uses the platform's default character encoding."	
IC_JDDM_9696	java.io.File.toURL()	java.io.File	toURL()	"This method does not automatically escape characters that are illegal in URLs. It is recommended that new code convert an abstract pathname into a URL by first converting it into a URI, via the toURI method, and then converting the URI into a URL via the URI.toURL method."	
IC_JDDM_9700	"java.util.Date.UTC(int, int, int, int, int, int)"	java.util.Date	"UTC(int, int, int, int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec), using a UTC TimeZone, followed by Calendar.getTime().getTime()."	
IC_JDDM_9711	"java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(boolean, boolean)"	java.util.concurrent.atomic.AtomicBoolean	"weakCompareAndSet(boolean, boolean)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicBoolean.compareAndExchange(boolean, boolean) and AtomicBoolean.compareAndSet(boolean, boolean)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicBoolean.weakCompareAndSetPlain(boolean, boolean) be used instead."	
IC_JDDM_9712	"java.util.concurrent.atomic.AtomicInteger.weakCompareAndSet(int, int)"	java.util.concurrent.atomic.AtomicInteger	"weakCompareAndSet(int, int)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicInteger.compareAndExchange(int, int) and AtomicInteger.compareAndSet(int, int)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicInteger.weakCompareAndSetPlain(int, int) be used instead."	
IC_JDDM_9713	"java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSet(int, int, int)"	java.util.concurrent.atomic.AtomicIntegerArray	"weakCompareAndSet(int, int, int)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicIntegerArray.compareAndExchange(int, int, int) and AtomicIntegerArray.compareAndSet(int, int, int)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicIntegerArray.weakCompareAndSetPlain(int, int, int) be used instead."	
IC_JDDM_9714	"java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long, long)"	java.util.concurrent.atomic.AtomicLong	"weakCompareAndSet(long, long)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicLong.compareAndExchange(long, long) and AtomicLong.compareAndSet(long, long)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicLong.weakCompareAndSetPlain(long, long) be used instead."	
IC_JDDM_9715	"java.util.concurrent.atomic.AtomicLongArray.weakCompareAndSet(int, long, long)"	java.util.concurrent.atomic.AtomicLongArray	"weakCompareAndSet(int, long, long)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicLongArray.compareAndExchange(int, long, long) and AtomicLongArray.compareAndSet(int, long, long)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicLongArray.weakCompareAndSetPlain(int, long, long) be used instead."	
IC_JDDM_9716	"java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(V, V)"	java.util.concurrent.atomic.AtomicReference	"weakCompareAndSet(V, V)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicReference.compareAndExchange(V, V) and AtomicReference.compareAndSet(V, V)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicReference.weakCompareAndSetPlain(V, V) be used instead."	
IC_JDDM_9717	"java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet(int, E, E)"	java.util.concurrent.atomic.AtomicReferenceArray	"weakCompareAndSet(int, E, E)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicReferenceArray.compareAndExchange(int, E, E) and AtomicReferenceArray.compareAndSet(int, E, E)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicReferenceArray.weakCompareAndSetPlain(int, E, E) be used instead."	
IC_JDDM_9718	java.io.ObjectOutputStream.PutField.write(ObjectOutput)	java.io.ObjectOutputStream.PutField	write(ObjectOutput)	"This method does not write the values contained by this PutField object in a proper format, and may result in corruption of the serialization stream. The correct way to write PutField data is by calling the ObjectOutputStream.writeFields() method."	
IC_JDDM_9728	java.lang.Boolean(boolean)	java.lang	Boolean(boolean)	"It is rarely appropriate to use this constructor. The static factory Boolean.valueOf(boolean) is generally a better choice, as it is likely to yield significantly better space and time performance. Also consider using the final fields Boolean.TRUE and Boolean.FALSE if possible."	
IC_JDDM_9730	java.lang.Byte(byte)	java.lang	Byte(byte)	"It is rarely appropriate to use this constructor. The static factory Byte.valueOf(byte) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_9732	java.lang.Character(char)	java.lang	Character(char)	"It is rarely appropriate to use this constructor. The static factory Character.valueOf(char) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_9734	"java.util.Date(int, int, int)"	java.util	"Date(int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date) or GregorianCalendar(year + 1900, month, date)."	
IC_JDDM_9735	"java.util.Date(int, int, int, int, int)"	java.util	"Date(int, int, int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min) or GregorianCalendar(year + 1900, month, date, hrs, min)."	
IC_JDDM_9736	"java.util.Date(int, int, int, int, int, int)"	java.util	"Date(int, int, int, int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec)."	
IC_JDDM_9737	java.util.Date(String)	java.util	Date(String)	"As of JDK version 1.1, replaced by DateFormat.parse(String s)."	
IC_JDDM_9738	java.lang.Double(double)	java.lang	Double(double)	"It is rarely appropriate to use this constructor. The static factory Double.valueOf(double) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_9745	java.lang.Float(double)	java.lang	Float(double)	"It is rarely appropriate to use this constructor. Instead, use the static factory method Float.valueOf(float) method as follows
IC_JDDM_9746	java.lang.Float(float)	java.lang	Float(float)	"It is rarely appropriate to use this constructor. The static factory Float.valueOf(float) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_9750	java.lang.Integer(int)	java.lang	Integer(int)	"It is rarely appropriate to use this constructor. The static factory Integer.valueOf(int) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_9753	java.lang.Long(long)	java.lang	Long(long)	"It is rarely appropriate to use this constructor. The static factory Long.valueOf(long) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_9760	java.lang.Short(short)	java.lang	Short(short)	"It is rarely appropriate to use this constructor. The static factory Short.valueOf(short) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_9771	java.io.StreamTokenizer(InputStream)	java.io	StreamTokenizer(InputStream)	"
IC_JDDM_X340	java.awt.ComponentOrientation.getOrientation?(ResourceBundle)	java.awt.ComponentOrientation	getOrientation?(ResourceBundle)	"As of J2SE 1.4, use ComponentOrientation.getOrientation(java.util.Locale)."	
IC_JDDM_X411	java.io.ByteArrayOutputStream.toString?(int)	java.io.ByteArrayOutputStream	toString?(int)	"This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the ByteArrayOutputStream.toString(String charsetName) or ByteArrayOutputStream.toString(Charset charset) method, which takes an encoding-name or charset argument, or the toString() method, which uses the platform's default character encoding."	
IC_JDDM_X417	java.io.ObjectOutputStream.PutField.write?(ObjectOutput)	java.io.ObjectOutputStream.PutField	write?(ObjectOutput)	"This method does not write the values contained by this PutField object in a proper format, and may result in corruption of the serialization stream. The correct way to write PutField data is by calling the ObjectOutputStream.writeFields() method."	
IC_JDDM_X450	"java.math.BigDecimal.divide?(BigDecimal, int, int)"	java.math.BigDecimal	"divide?(BigDecimal, int, int)"	"The method BigDecimal.divide(BigDecimal, int, RoundingMode) should be used in preference to this legacy method."	
IC_JDDM_X451	"java.math.BigDecimal.setScale?(int, int)"	java.math.BigDecimal	"setScale?(int, int)"	"The method BigDecimal.setScale(int, RoundingMode) should be used in preference to this legacy method."	
IC_JDDM_X492	java.rmi.server.UnicastRemoteObject.exportObject?(Remote)	java.rmi.server.UnicastRemoteObject	exportObject?(Remote)	"This method is deprecated because it supports only static stubs. Use exportObject(Remote, port) or exportObject(Remote, port, csf, ssf) instead."	
IC_JDDM_X518	"java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet?(boolean, boolean)"	java.util.concurrent.atomic.AtomicBoolean	"weakCompareAndSet?(boolean, boolean)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicBoolean.compareAndExchange(boolean, boolean) and AtomicBoolean.compareAndSet(boolean, boolean)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicBoolean.weakCompareAndSetPlain(boolean, boolean) be used instead."	
IC_JDDM_X519	"java.util.concurrent.atomic.AtomicInteger.weakCompareAndSet?(int, int)"	java.util.concurrent.atomic.AtomicInteger	"weakCompareAndSet?(int, int)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicInteger.compareAndExchange(int, int) and AtomicInteger.compareAndSet(int, int)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicInteger.weakCompareAndSetPlain(int, int) be used instead."	
IC_JDDM_X520	"java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSet?(int, int, int)"	java.util.concurrent.atomic.AtomicIntegerArray	"weakCompareAndSet?(int, int, int)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicIntegerArray.compareAndExchange(int, int, int) and AtomicIntegerArray.compareAndSet(int, int, int)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicIntegerArray.weakCompareAndSetPlain(int, int, int) be used instead."	
IC_JDDM_X521	"java.util.concurrent.atomic.AtomicLong.weakCompareAndSet?(long, long)"	java.util.concurrent.atomic.AtomicLong	"weakCompareAndSet?(long, long)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicLong.compareAndExchange(long, long) and AtomicLong.compareAndSet(long, long)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicLong.weakCompareAndSetPlain(long, long) be used instead."	
IC_JDDM_X522	"java.util.concurrent.atomic.AtomicLongArray.weakCompareAndSet?(int, long, long)"	java.util.concurrent.atomic.AtomicLongArray	"weakCompareAndSet?(int, long, long)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicLongArray.compareAndExchange(int, long, long) and AtomicLongArray.compareAndSet(int, long, long)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicLongArray.weakCompareAndSetPlain(int, long, long) be used instead."	
IC_JDDM_X523	"java.util.concurrent.atomic.AtomicReference.weakCompareAndSet?(V, V)"	java.util.concurrent.atomic.AtomicReference	"weakCompareAndSet?(V, V)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicReference.compareAndExchange(V, V) and AtomicReference.compareAndSet(V, V)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicReference.weakCompareAndSetPlain(V, V) be used instead."	
IC_JDDM_X524	"java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet?(int, E, E)"	java.util.concurrent.atomic.AtomicReferenceArray	"weakCompareAndSet?(int, E, E)"	"This method has plain memory effects but the method name implies volatile memory effects (see methods such as AtomicReferenceArray.compareAndExchange(int, E, E) and AtomicReferenceArray.compareAndSet(int, E, E)). To avoid confusion over plain or volatile memory effects it is recommended that the method AtomicReferenceArray.weakCompareAndSetPlain(int, E, E) be used instead."	
IC_JDDM_X534	java.util.Date.parse?(String)	java.util.Date	parse?(String)	"As of JDK version 1.1, replaced by DateFormat.parse(String s)."	
IC_JDDM_X535	java.util.Date.setDate?(int)	java.util.Date	setDate?(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.DAY_OF_MONTH, int date)."	
IC_JDDM_X536	java.util.Date.setHours?(int)	java.util.Date	setHours?(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.HOUR_OF_DAY, int hours)."	
IC_JDDM_X537	java.util.Date.setMinutes?(int)	java.util.Date	setMinutes?(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.MINUTE, int minutes)."	
IC_JDDM_X538	java.util.Date.setMonth?(int)	java.util.Date	setMonth?(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.MONTH, int month)."	
IC_JDDM_X539	java.util.Date.setSeconds?(int)	java.util.Date	setSeconds?(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.SECOND, int seconds)."	
IC_JDDM_X540	java.util.Date.setYear?(int)	java.util.Date	setYear?(int)	"As of JDK version 1.1, replaced by Calendar.set(Calendar.YEAR, year + 1900)."	
IC_JDDM_X543	"java.util.Date.UTC?(int, int, int, int, int, int)"	java.util.Date	"UTC?(int, int, int, int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date, hrs, min, sec) or GregorianCalendar(year + 1900, month, date, hrs, min, sec), using a UTC TimeZone, followed by Calendar.getTime().getTime()."	
IC_JDDM_X544	"java.util.logging.Logger.logrb?(Level, String, String, String, String)"	java.util.logging.Logger	"logrb?(Level, String, String, String, String)"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead."	
IC_JDDM_X546	java.util.logging.LoggingMXBean	java.util.logging	LoggingMXBean	No Replacement	
IC_JDDM_X547	java.util.logging.LogRecord.setMillis?(long)	java.util.logging.LogRecord	setMillis?(long)	"LogRecord maintains timestamps with nanosecond resolution, using Instant values. For this reason, setInstant() should be used in preference to setMillis()."	
IC_JDDM_X548	"java.util.Properties.save?(OutputStream, String)"	java.util.Properties	"save?(OutputStream, String)"	"This method does not throw an IOException if an I/O error occurs while saving the property list. The preferred way to save a properties list is via the store(OutputStream out, String comments) method or the storeToXML(OutputStream os, String comment) method."	
IC_JDDM_X600	"javax.sql.rowset.BaseRowSet.setUnicodeStream?(int, InputStream, int)"	javax.sql.rowset.BaseRowSet	"setUnicodeStream?(int, InputStream, int)"	getCharacterStream should be used in its place	
IC_JDDM_X685	"jdk.nashorn.api.scripting.AbstractJSObject.getDefaultValue?(JSObject, Class<?>)"	jdk.nashorn.api.scripting.AbstractJSObject	"getDefaultValue?(JSObject, Class<?>)"	use JSObject.getDefaultValue(Class) instead.	
IC_JDDM_X710	java.io.StreamTokenizer?(InputStream)	java.io	StreamTokenizer?(InputStream)	"As of JDK version 1.1, the preferred way to tokenize an input stream is to convert it into a character stream, for example
IC_JDDM_X711	java.lang.Boolean?(boolean)	java.lang	Boolean?(boolean)	"It is rarely appropriate to use this constructor. The static factory Boolean.valueOf(boolean) is generally a better choice, as it is likely to yield significantly better space and time performance. Also consider using the final fields Boolean.TRUE and Boolean.FALSE if possible."	
IC_JDDM_X712	java.lang.Byte?(byte)	java.lang	Byte?(byte)	"It is rarely appropriate to use this constructor. The static factory Byte.valueOf(byte) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_X713	java.lang.Character?(char)	java.lang	Character?(char)	"It is rarely appropriate to use this constructor. The static factory Character.valueOf(char) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_X714	java.lang.Double?(double)	java.lang	Double?(double)	"It is rarely appropriate to use this constructor. The static factory Double.valueOf(double) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_X715	java.lang.Float?(float)	java.lang	Float?(float)	"It is rarely appropriate to use this constructor. The static factory Float.valueOf(float) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_X716	java.lang.Integer?(int)	java.lang	Integer?(int)	"It is rarely appropriate to use this constructor. The static factory Integer.valueOf(int) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_X717	java.lang.Long?(long)	java.lang	Long?(long)	"It is rarely appropriate to use this constructor. The static factory Long.valueOf(long) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_X718	java.lang.Short?(short)	java.lang	Short?(short)	"It is rarely appropriate to use this constructor. The static factory Short.valueOf(short) is generally a better choice, as it is likely to yield significantly better space and time performance."	
IC_JDDM_X730	"java.util.Date?(int, int, int)"	java.util	"Date?(int, int, int)"	"As of JDK version 1.1, replaced by Calendar.set(year + 1900, month, date) or GregorianCalendar(year + 1900, month, date)."	
IC_JDDM_XV030	"java.math.BigDecimal.divide?(BigDecimal, int)"	java.math.BigDecimal	"divide?(BigDecimal, int)"	"The method BigDecimal.divide(BigDecimal, RoundingMode) should be used in preference to this legacy method."	
IC_JDDM_XV035	"java.util.logging.Logger.logrb?(Level, String, String, String, String, Object)"	java.util.logging.Logger	"logrb?(Level, String, String, String, String, Object)"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead"	
IC_JDDM_XV036	"java.util.logging.Logger.logrb?(Level, String, String, String, String, Object[])"	java.util.logging.Logger	"logrb?(Level, String, String, String, String, Object[])"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...) instead."	
IC_JDDM_XV037	"java.util.logging.Logger.logrb?(Level, String, String, String, String, Throwable)"	java.util.logging.Logger	"logrb?(Level, String, String, String, String, Throwable)"	"Use Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Throwable) instead."	
IC_JDDM_XVI015	java.util.logging.LogRecord.getThreadID()	java.util.logging.LogRecord	getThreadID()	"Values returned by this method may be synthesized, and may not correspond to the actual thread id, use LogRecord.getLongThreadID() instead."	
IC_JDDM_XVI016	java.util.logging.LogRecord.setThreadID?(int)	java.util.logging.LogRecord	setThreadID?(int)	"This method doesn't allow to pass a long thread id, use LogRecord.setLongThreadID(long) instead."	
IC_JDDM_XVII020	java.util.concurrent.Executors.privilegedCallable(Callable<T>)	java.util.concurrent.Executors	privilegedCallable(Callable<T>)	"This method is only useful in conjunction with the Security Manager, which is deprecated and subject to removal in a future release. Consequently, this method is also deprecated and subject to removal. There is no replacement for the Security Manager or this method."	
IC_JDDM_XVII021	java.util.concurrent.Executors.privilegedCallableUsingCurrentClassLoader(Callable<T>)	java.util.concurrent.Executors	privilegedCallableUsingCurrentClassLoader(Callable<T>)	"This method is only useful in conjunction with the Security Manager, which is deprecated and subject to removal in a future release. Consequently, this method is also deprecated and subject to removal. There is no replacement for the Security Manager or this method."	
IC_JDDM_XVII022	java.util.concurrent.Executors.privilegedThreadFactory()	java.util.concurrent.Executors	privilegedThreadFactory()	"This method is only useful in conjunction with the Security Manager, which is deprecated and subject to removal in a future release. Consequently, this method is also deprecated and subject to removal. There is no replacement for the Security Manager or this method."	
IC_JDDM_XVII023	java.util.logging.LogManager.checkAccess()	java.util.logging.LogManager	checkAccess()	"This method is only useful in conjunction with the Security Manager, which is deprecated and subject to removal in a future release. Consequently, this method is also deprecated and subject to removal. There is no replacement for the Security Manager or this method."	
IC_JDRE_9029	java.transaction	java	transaction	java.xml.bind	
IC_JDRE_9030	java.xml.bind	java.xml	bind	java.xml.ws	
IC_JDRE_9031	java.xml.ws	java.xml	ws	java.xml.ws.annotation	
IC_JDRE_9032	java.xml.ws.annotation	java.xml.ws	annotation	jdk.policytool	
IC_JDRE_XI001	jdk.nashorn.api.scripting.AbstractJSObject	jdk.nashorn.api.scripting	AbstractJSObject	"Nashorn JavaScript script engine and APIs, and the jjs tool are deprecated with the intent to remove them in a future release."	 
IC_JDRE_XI078	java.util.jar.Pack200.Packer	java.util.jar.Pack200	Packer	"This interface is deprecated, and is planned for removal in a future release."	
IC_JDRE_XI079	java.util.jar.Pack200.Unpacker	java.util.jar.Pack200	Unpacker	"This interface is deprecated, and is planned for removal in a future release."	
IC_OSRVDEP_001	javax.servlet.http.HttpSessionContext	javax.servlet.http	HttpSessionContext	As of Java(tm) Servlet API 2.1 for security reasons, with no replacement. This interface will be removed in a future version of this API.
IC_OSRVDEP_002	javax.servlet.SingleThreadModel	javax.servlet	SingleThreadModel	As of Java Servlet API 2.4, with no direct replacement.
IC_OSRVDEP_003	javax.servlet.http.HttpUtils	javax.servlet.http	HttpUtils	As of Java(tm) Servlet API 2.3. These methods were only useful with the default encoding and have been moved to the request interfaces.
IC_OSRVDEP_004	javax.servlet.http.HttpServletResponse.encodeRedirectUrl(String)	javax.servlet.http.HttpServletResponse	encodeRedirectUrl(String)	As of version 2.1, use encodeRedirectURL(String url) instead
IC_OSRVDEP_005	javax.servlet.http.HttpServletResponse.encodeUrl(String)	javax.servlet.http.HttpServletResponse	encodeUrl(String)	As of version 2.1, use encodeURL(String url) instead
IC_OSRVDEP_006	javax.servlet.http.HttpSessionContext.getIds()	javax.servlet.http.HttpSessionContext	getIds()	As of Java Servlet API 2.1 with no replacement. This method must return an empty Enumeration and will be removed in a future version of this API.
IC_OSRVDEP_007	javax.servlet.ServletRequest.getRealPath(String)	javax.servlet.ServletRequest	getRealPath(String)	As of Version 2.1 of the Java Servlet API, use ServletContext.getRealPath(java.lang.String) instead.
IC_OSRVDEP_008	javax.servlet.UnavailableException.getServlet()	javax.servlet.UnavailableException	getServlet()	As of Java Servlet API 2.2, with no replacement. Returns the servlet that is reporting its unavailability.
IC_OSRVDEP_009	javax.servlet.ServletContext.getServlet(String)	javax.servlet.ServletContext	getServlet(String)	As of Java Servlet API 2.1, with no direct replacement. This method was originally defined to retrieve a servlet from a ServletContext. In this version, this method always returns null and remains only to In lieu of this method, servlets can share information using the ServletContext class and can perform shared business logic by invoking methods on common non-servlet classes. preserve binary compatibility. This method will be permanently removed in a future version of the Java Servlet API
IC_OSRVDEP_010	javax.servlet.ServletContext.getServletNames()	javax.servlet.ServletContext	getServletNames()	As of Java Servlet API 2.1, with no replacement. This method was originally defined to return an Enumeration of all the servlet names known to this context. In this version, this method always returns an empty Enumeration and remains only to preserve binary compatibility. This method will be permanently removed in a future version of the Java Servlet API.
IC_OSRVDEP_011	javax.servlet.ServletContext.getServlets()	javax.servlet.ServletContext	getServlets()	As of Java Servlet API 2.0, with no replacement. This method was originally defined to return an Enumeration of all the servlets known to this servlet context. In this version, this method always returns an empty enumeration and remains only to preserve binary compatibility. This method will be permanently removed in a future version of the Java Servlet API.
IC_OSRVDEP_012	javax.servlet.http.HttpSessionContext.getSession(String)	javax.servlet.http.HttpSessionContext	getSession(String)	As of Java Servlet API 2.1 with no replacement. This method must return null and will be removed in a future version of this API.
IC_OSRVDEP_013	javax.servlet.http.HttpSession.getSessionContext()	javax.servlet.http.HttpSession	getSessionContext()	As of Version 2.1, this method is deprecated and has no replacement. It will be removed in a future version of the Java Servlet API.
IC_OSRVDEP_014	javax.servlet.http.HttpSession.getValue(String)	javax.servlet.http.HttpSession	getValue(String)	As of Version 2.2, this method is replaced by HttpSession.getAttribute(java.lang.String).
IC_OSRVDEP_015	javax.servlet.http.HttpSession.getValueNames()	javax.servlet.http.HttpSession	getValueNames()	As of Version 2.2, this method is replaced by HttpSession.getAttributeNames()
IC_OSRVDEP_016	javax.servlet.http.HttpServletRequest.isRequestedSessionIdFromUrl()	javax.servlet.http.HttpServletRequest	isRequestedSessionIdFromUrl()	As of Version 2.1 of the Java Servlet API, use HttpServletRequest.isRequestedSessionIdFromURL() instead.
IC_OSRVDEP_017	javax.servlet.ServletContext.log(Exception, String)	javax.servlet.ServletContext	log(Exception, String)	As of Java Servlet API 2.1, use ServletContext.log(String message, Throwable throwable) instead. This method was originally defined to write an exception's stack trace and an explanatory error message to the servlet log file.
IC_OSRVDEP_018	javax.servlet.http.HttpSession.putValue(String, Object)	javax.servlet.http.HttpSession	putValue(String, Object)	As of Version 2.2, this method is replaced by HttpSession.setAttribute(java.lang.String, java.lang.Object)
IC_OSRVDEP_019	javax.servlet.http.HttpSession.removeValue(String)	javax.servlet.http.HttpSession	removeValue(String)	As of Version 2.2, this method is replaced by HttpSession.removeAttribute(java.lang.String)
IC_OSRVDEP_020	javax.servlet.http.HttpServletResponse.setStatus(int, String)	javax.servlet.http.HttpServletResponse	setStatus(int, String)	As of version 2.1, due to ambiguous meaning of the message parameter. To set a status code use setStatus(int), to send an error with a description use sendError(int, String). Sets the status code and message for this response.
IC_OSRVDEP_021	javax.servlet.UnavailableException(int, Servlet, String)	javax.servlet	UnavailableException(int, Servlet, String)	As of Java Servlet API 2.2, use UnavailableException.UnavailableException(String, int) instead.
IC_OSRVDEP_022	javax.servlet.UnavailableException(Servlet, String)	javax.servlet	UnavailableException(Servlet, String)	As of Java Servlet API 2.2, use UnavailableException.UnavailableException(String) instead.
IC_RSRVDEP_011	javax.servlet.jsp.el.Expression	javax.servlet.jsp.el.	Expression	As of JSP 2.1, replaced by ValueExpression
IC_RSRVDEP_012	javax.servlet.jsp.el.ExpressionEvaluator	javax.servlet.jsp.el.	ExpressionEvaluator	As of JSP 2.1, replaced by ExpressionFactory
IC_RSRVDEP_019	javax.servlet.http.HttpUtils	javax.servlet.http.	HttpUtils	As of Java(tm) Servlet API 2.3. These methods were only useful with the default encoding and have been moved to the request interfaces.
IC_RSRVDEP_030	com.fasterxml.jackson.annotation.JsonTypeInfo.None	com.fasterxml.jackson.annotation.JsonTypeInfo.	None	Since 2.5, use Void instead.
IC_RSRVDEP_076	javax.faces.application.StateManager.SerializedView	javax.faces.application.StateManager.	SerializedView	This class was not marked Serializable in the 1.0 version of the spec. It was also not a static inner class, so it can't be made to be Serializable. Therefore, it is being deprecated in version 1.2 of the spec. The replacement is to use an implementation dependent Object.
IC_RSRVDEP_095	org.hibernate.annotations.SortType	org.hibernate.annotations.	SortType	Since Sort is deprecated.
IC_RSRVDEP_100	javax.servlet.jsp.el.ELException	javax.servlet.jsp.el.	ELException	As of JSP 2.1, replaced by ELException
IC_RSRVDEP_101	javax.servlet.jsp.el.ELParseException	javax.servlet.jsp.el.	ELParseException	As of JSP 2.1, replaced by ELException
IC_RSRVDEP_1046	javax.servlet.UnavailableException(int, Servlet, String)	javax.servlet.	UnavailableException(int, Servlet, String)	As of Java Servlet API 2.2, use UnavailableException.UnavailableException(String, int) instead.
IC_RSRVDEP_1047	javax.servlet.UnavailableException(Servlet, String)	javax.servlet.	UnavailableException(Servlet, String)	As of Java Servlet API 2.2, use UnavailableException.UnavailableException(String) instead.
IC_RSRVDEP_1051	org.hibernate.annotations.CascadeType.DELETE_ORPHAN	org.hibernate.annotations.CascadeType.	DELETE_ORPHAN	use @OneToOne(orphanRemoval=true) or @OneToMany(orphanRemoval=true)
IC_RSRVDEP_1052	org.hibernate.annotations.CascadeType.EVICT	org.hibernate.annotations.CascadeType.	EVICT	use javax.persistence.CascadeType.DETACH
IC_RSRVDEP_1055	org.hibernate.annotations.FlushModeType.NEVER	org.hibernate.annotations.FlushModeType.	NEVER	use MANUAL, will be removed in a subsequent release
IC_RSRVDEP_1061	org.hibernate.annotations.Entity.dynamicInsert	org.hibernate.annotations.Entity.	dynamicInsert	use DynamicInsert instead
IC_RSRVDEP_1062	org.hibernate.annotations.Entity.dynamicUpdate	org.hibernate.annotations.Entity.	dynamicUpdate	Use DynamicUpdate instead
IC_RSRVDEP_1063	org.hibernate.annotations.Tuplizer.entityMode	org.hibernate.annotations.Tuplizer.	entityMode	should use #entityModeType instead
IC_RSRVDEP_1065	org.hibernate.annotations.Entity.mutable	org.hibernate.annotations.Entity.	mutable	use Immutable
IC_RSRVDEP_1067	org.hibernate.annotations.Entity.optimisticLock	org.hibernate.annotations.Entity.	optimisticLock	use OptimisticLocking instead.
IC_RSRVDEP_1068	org.hibernate.annotations.Entity.persister	org.hibernate.annotations.Entity.	persister	use Persister instead
IC_RSRVDEP_1069	org.hibernate.annotations.Entity.polymorphism	org.hibernate.annotations.Entity.	polymorphism	use Polymorphism instead
IC_RSRVDEP_1072	org.hibernate.annotations.Entity.selectBeforeUpdate	org.hibernate.annotations.Entity.	selectBeforeUpdate	Use SelectBeforeUpdate instead
IC_RSRVDEP_122	org.hibernate.annotations.AccessType	org.hibernate.annotations.	AccessType	Use AttributeAccessor instead; renamed to avoid confusion with the JPA AccessType enum.
IC_RSRVDEP_131	org.hibernate.annotations.Entity	org.hibernate.annotations.	Entity	See individual attributes for intended replacements. To be removed in 4.1
IC_RSRVDEP_134	org.hibernate.annotations.ForeignKey	org.hibernate.annotations.	ForeignKey	Prefer the JPA 2.1 introduced ForeignKey instead.
IC_RSRVDEP_136	org.hibernate.annotations.Index	org.hibernate.annotations.	Index	Using Index instead.
IC_RSRVDEP_137	org.hibernate.annotations.IndexColumn	org.hibernate.annotations.	IndexColumn	Prefer the standard JPA OrderColumn annotation and the Hibernate specific ListIndexBase (for replacing IndexColumn.base()).
IC_RSRVDEP_151	org.hibernate.annotations.Sort	org.hibernate.annotations.	Sort	Use SortComparator or SortNatural instead depending on need.
IC_RSRVDEP_180	javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_TAG	javax.servlet.jsp.tagext.BodyTag.	EVAL_BODY_TAG	As of Java JSP API 1.2, use BodyTag.EVAL_BODY_BUFFERED or IterationTag.EVAL_BODY_AGAIN.
IC_RSRVDEP_213	javax.persistence.Persistence.PERSISTENCE_PROVIDER	javax.persistence.Persistence.	PERSISTENCE_PROVIDER	Need to Verify
IC_RSRVDEP_218	javax.persistence.Persistence.providers	javax.persistence.Persistence.	providers	Need to Verify
IC_RSRVDEP_294	javax.validation.ConstraintValidatorContext.ConstraintViolationBuilder.addNode(String)	javax.validation.ConstraintValidatorContext.ConstraintViolationBuilder.	addNode(String)	since 1.1 - replaced by ConstraintValidatorContext.ConstraintViolationBuilder.addPropertyNode(String), ConstraintValidatorContext.ConstraintViolationBuilder.addBeanNode() and ConstraintValidatorContext.ConstraintViolationBuilder.addParameterNode(int)
IC_RSRVDEP_295	javax.validation.ConstraintValidatorContext.ConstraintViolationBuilder.NodeBuilderDefinedContext.addNode(String)	javax.validation.ConstraintValidatorContext.ConstraintViolationBuilder.NodeBuilderDefinedContext.	addNode(String)	since 1.1 - replaced by ConstraintValidatorContext.ConstraintViolationBuilder.NodeBuilderDefinedContext.addPropertyNode(String) and ConstraintValidatorContext.ConstraintViolationBuilder.NodeBuilderDefinedContext.addBeanNode()
IC_RSRVDEP_296	javax.validation.ConstraintValidatorContext.ConstraintViolationBuilder.NodeBuilderCustomizableContext.addNode(String)	javax.validation.ConstraintValidatorContext.ConstraintViolationBuilder.NodeBuilderCustomizableContext.	addNode(String)	since 1.1 - replaced by ConstraintValidatorContext.ConstraintViolationBuilder.NodeBuilderCustomizableContext.addPropertyNode(String) and ConstraintValidatorContext.ConstraintViolationBuilder.NodeBuilderCustomizableContext.addBeanNode()
IC_RSRVDEP_297	javax.validation.ConstraintValidatorContext.ConstraintViolationBuilder.NodeContextBuilder.addNode(String)	javax.validation.ConstraintValidatorContext.ConstraintViolationBuilder.NodeContextBuilder.	addNode(String)	since 1.1 - replaced by ConstraintValidatorContext.ConstraintViolationBuilder.NodeContextBuilder.addPropertyNode(String) and ConstraintValidatorContext.ConstraintViolationBuilder.NodeContextBuilder.addBeanNode()
IC_RSRVDEP_326	org.hibernate.cfg.annotations.TableBinder.buildUniqueConstraints(UniqueConstraint[])	org.hibernate.cfg.annotations.TableBinder.	buildUniqueConstraints(UniqueConstraint[])	Use TableBinder.buildUniqueConstraintHolders(javax.persistence.UniqueConstraint[]) instead
IC_RSRVDEP_334	org.hibernate.annotations.common.util.ReflectHelper.classForName(String, Class)	org.hibernate.annotations.common.util.ReflectHelper.	classForName(String, Class)	Deprecated in favor of ClassLoaderDelegate
IC_RSRVDEP_335	org.hibernate.annotations.common.reflection.java.JavaReflectionManager.classForName(String, Class)	org.hibernate.annotations.common.reflection.java.JavaReflectionManager.	classForName(String, Class)	Need to Verify
IC_RSRVDEP_336	org.hibernate.annotations.common.reflection.ReflectionManager.classForName(String, Class<T>)	org.hibernate.annotations.common.reflection.ReflectionManager.	classForName(String, Class<T>)	Instead use
IC_RSRVDEP_446	org.hibernate.persister.collection.AbstractCollectionPersister.doProcessQueuedOps(PersistentCollection, Serializable, int, SessionImplementor)	org.hibernate.persister.collection.AbstractCollectionPersister.	doProcessQueuedOps(PersistentCollection, Serializable, int, SessionImplementor)	Use AbstractCollectionPersister.doProcessQueuedOps(org.hibernate.collection.spi.PersistentCollection, java.io.Serializable, org.hibernate.engine.spi.SessionImplementor)
IC_RSRVDEP_454	javax.servlet.http.HttpServletResponseWrapper.encodeRedirectUrl(String)	javax.servlet.http.HttpServletResponseWrapper.	encodeRedirectUrl(String)	As of version 2.1, use HttpServletResponseWrapper.encodeRedirectURL(String url) instead
IC_RSRVDEP_455	javax.servlet.http.HttpServletResponse.encodeRedirectUrl(String)	javax.servlet.http.HttpServletResponse.	encodeRedirectUrl(String)	As of version 2.1, use encodeRedirectURL(String url) instead
IC_RSRVDEP_457	javax.servlet.http.HttpServletResponseWrapper.encodeUrl(String)	javax.servlet.http.HttpServletResponseWrapper.	encodeUrl(String)	As of version 2.1, use HttpServletResponseWrapper.encodeURL(String url) instead
IC_RSRVDEP_458	javax.servlet.http.HttpServletResponse.encodeUrl(String)	javax.servlet.http.HttpServletResponse.	encodeUrl(String)	As of version 2.1, use encodeURL(String url) instead
IC_RSRVDEP_547	javax.servlet.jsp.JspContext.getExpressionEvaluator()	javax.servlet.jsp.JspContext.	getExpressionEvaluator()	As of JSP 2.1, replaced by JspApplicationContext.getExpressionFactory()
IC_RSRVDEP_570	javax.servlet.http.HttpSessionContext.getIds()	javax.servlet.http.HttpSessionContext.	getIds()	As of Java Servlet API 2.1 with no replacement. This method must return an empty Enumeration and will be removed in a future version of this API.
IC_RSRVDEP_637	javax.servlet.ServletRequestWrapper.getRealPath(String)	javax.servlet.ServletRequestWrapper.	getRealPath(String)	As of Version 2.1 of the Java Servlet API, use ServletContext.getRealPath(java.lang.String) instead
IC_RSRVDEP_638	javax.servlet.ServletRequest.getRealPath(String)	javax.servlet.ServletRequest.	getRealPath(String)	As of Version 2.1 of the Java Servlet API, use ServletContext.getRealPath(java.lang.String) instead.
IC_RSRVDEP_643	javax.servlet.jsp.JspException.getRootCause()	javax.servlet.jsp.JspException.	getRootCause()	As of JSP 2.1, replaced by Throwable.getCause()
IC_RSRVDEP_650	javax.servlet.UnavailableException.getServlet()	javax.servlet.UnavailableException.	getServlet()	As of Java Servlet API 2.2, with no replacement. Returns the servlet that is reporting its unavailability.
IC_RSRVDEP_651	javax.servlet.ServletContext.getServlet(String)	javax.servlet.ServletContext.	getServlet(String)	As of Java Servlet API 2.1, with no direct replacement. This method was originally defined to retrieve a servlet from a ServletContext. In this version, this method always returns null and remains only to preserve binary compatibility. This method will be permanently removed in a future version of the Java Servlet API. In lieu of this method, servlets can share information using the ServletContext class and can perform shared business logic by invoking methods on common non-servlet classes.
IC_RSRVDEP_652	javax.servlet.ServletContext.getServletNames()	javax.servlet.ServletContext.	getServletNames()	As of Java Servlet API 2.1, with no replacement. This method was originally defined to return an Enumeration of all the servlet names known to this context. In this version, this method always returns an empty Enumeration and remains only to preserve binary compatibility. This method will be permanently removed in a future version of the Java Servlet API.
IC_RSRVDEP_653	javax.servlet.ServletContext.getServlets()	javax.servlet.ServletContext.	getServlets()	As of Java Servlet API 2.0, with no replacement. This method was originally defined to return an Enumeration of all the servlets known to this servlet context. In this version, this method always returns an empty enumeration and remains only to preserve binary compatibility. This method will be permanently removed in a future version of the Java Servlet API.
IC_RSRVDEP_654	javax.servlet.http.HttpSessionContext.getSession(String)	javax.servlet.http.HttpSessionContext.	getSession(String)	As of Java Servlet API 2.1 with no replacement. This method must return null and will be removed in a future version of this API.
IC_RSRVDEP_655	javax.servlet.http.HttpSession.getSessionContext()	javax.servlet.http.HttpSession.	getSessionContext()	As of Version 2.1, this method is deprecated and has no replacement. It will be removed in a future version of the Java Servlet API.
IC_RSRVDEP_677	javax.servlet.http.HttpSession.getValue(String)	javax.servlet.http.HttpSession.	getValue(String)	As of Version 2.2, this method is replaced by HttpSession.getAttribute(java.lang.String).
IC_RSRVDEP_685	javax.servlet.http.HttpSession.getValueNames()	javax.servlet.http.HttpSession.	getValueNames()	As of Version 2.2, this method is replaced by HttpSession.getAttributeNames()
IC_RSRVDEP_688	javax.servlet.jsp.JspContext.getVariableResolver()	javax.servlet.jsp.JspContext.	getVariableResolver()	As of JSP 2.1, replaced by ELContext.getELResolver(), which can be obtained by jspContext.getELContext().getELResolver().
IC_RSRVDEP_704	org.slf4j.Marker.hasChildren()	org.slf4j.Marker.	hasChildren()	Replaced by Marker.hasReferences().
IC_RSRVDEP_744	javax.servlet.http.HttpServletRequest.isRequestedSessionIdFromUrl()	javax.servlet.http.HttpServletRequest.	isRequestedSessionIdFromUrl()	As of Version 2.1 of the Java Servlet API, use HttpServletRequest.isRequestedSessionIdFromURL() instead.
IC_RSRVDEP_748	org.hibernate.loader.entity.UniqueEntityLoader.load(Serializable, Object, SessionImplementor)	org.hibernate.loader.entity.UniqueEntityLoader.	load(Serializable, Object, SessionImplementor)	use UniqueEntityLoader.load(java.io.Serializable, Object, SessionImplementor, LockOptions) instead.
IC_RSRVDEP_749	javax.servlet.ServletContext.log(Exception, String)	javax.servlet.ServletContext.	log(Exception, String)	As of Java Servlet API 2.1, use ServletContext.log(String message, Throwable throwable) instead. This method was originally defined to write an exception's stack trace and an explanatory error message to the servlet log file.
IC_RSRVDEP_782	javax.servlet.http.HttpSession.putValue(String, Object)	javax.servlet.http.HttpSession.	putValue(String, Object)	As of Version 2.2, this method is replaced by HttpSession.setAttribute(java.lang.String, java.lang.Object)
IC_RSRVDEP_796	javax.servlet.http.HttpSession.removeValue(String)	javax.servlet.http.HttpSession.	removeValue(String)	As of Version 2.2, this method is replaced by HttpSession.removeAttribute(java.lang.String)
IC_RSRVDEP_859	com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations(Map<Class<?>, Class<?>>)	com.fasterxml.jackson.databind.ObjectMapper.	setMixInAnnotations(Map<Class<?>, Class<?>>)	Since 2.5
IC_RSRVDEP_884	javax.servlet.http.HttpServletResponseWrapper.setStatus(int, String)	javax.servlet.http.HttpServletResponseWrapper.	setStatus(int, String)	As of version 2.1, due to ambiguous meaning of the message parameter. To set a status code use HttpServletResponseWrapper.setStatus(int), to send an error with a description use HttpServletResponseWrapper.sendError(int, String)
IC_RSRVDEP_885	javax.servlet.http.HttpServletResponse.setStatus(int, String)	javax.servlet.http.HttpServletResponse.	setStatus(int, String)	As of version 2.1, due to ambiguous meaning of the message parameter. To set a status code use setStatus(int), to send an error with a description use sendError(int, String). Sets the status code and message for this response.
