#!/bin/sh
#
# $Header: /data/cvsrepo/assess-tools/bin/8000_getcharval,v 1.5 2014/03/07 05:07:30 morimoto Exp $
# $Name: rev_1_10 $
#
# Tool name : 8000_getcharval
# Overview     : Extract source code using char array, char pointer
# Execution method : 8000_getcharval filelist
# Execution environment: Move to the comment removed source code directory with cd before executing
# Input: filelist: Comment removed source code file name list
# Output     : $PJHOME/log/$APNAME/charinv/YYYY-MMDD/char-array.out
# 　　     : $PJHOME/log/$APNAME/charinv/YYYY-MMDD/char-pointer.out
# Standard Output : (1) サイズなしのchar配列の行数(ex. char aaa[]={'a','b'};)
# 　　　　 : (2) サイズつきのchar配列の行数(ex. char bbb[20];)
# 　　　　 : (3) charポインタの行数(ex. char* ccc;)

if [  $# -ne 1 ];
then
        echo "Usage : $0 filelist"
        exit 1
else
        filelist=$1
fi

if [ "${PJHOME}" = "" ];
then
        echo "Error : \${PJHOME} must be set."
        exit 1
fi
if [ "${APNAME}" = "" ];
then
        echo "Error : \${APNAME} must be set."
        exit 1
fi

logdir="${PJHOME}/log/${APNAME}/charinv/`date '+%Y-%m%d'`";
logfilearray="$logdir/char-array.out";
logfilepointer="$logdir/char-pointer.out";

if [ -f $logfilearray ];
then
        mv $logfilearray "${logfilearray}.bak_`date +%Y%m%d_%H%M%S`"
fi
if [ -f $logfilepointer ];
then
        mv $logfilepointer "${logfilepointer}.bak_`date +%Y%m%d_%H%M%S`"
fi
if [ ! -d $logdir ];
then
	mkdir -p $logdir
fi

echo "### 8000_getcharval start"
echo "PJHOME: $PJHOME"
echo "APNAME: $APNAME"
echo "LANG: $LANG"
echo "source code file list: $filelist"
echo


echo "1. char array definition search"
echo "output to logfile: $logfilearray"

for i in `cat $filelist`
do
        outname=`echo  $i | sed 's/\//\\\\\\//g'`
        grep -n -e '^[[:blank:]][[:blank:]]*[^#().[:blank:]][^#().[:blank:]]*[[:blank:]][[:blank:]]*[^()= ][^()= ]*[[:blank:]]*;' \
        -e '^[[:blank:]][[:blank:]]*[^#().[:blank:]][^#().[:blank:]]*[[:blank:]][[:blank:]]*[^()= ][^()= ]*[[:blank:]]*=' \
        -e '^[[:blank:]][[:blank:]]*[^#().[:blank:]][^#().[:blank:]]*[[:blank:]][[:blank:]]*.*\[[^]][^]]*\][[:blank:]]*;' $i | \
        grep ':[[:blank:]][[:blank:]]*char' | \
        sed -e "s/^/$outname:/" -e "s/	/ /g" | sed "s/:\([0-9]*\):/	\1	/" | perl -ne "print if ! /\[\s*\]\s*[^=]*;/" >> $logfilearray;
done

echo "## Result:"
echo "##  char array without size  (ex. char aaa[] = {'a','b','c'};) : \c"
cat $logfilearray | perl -ne "print if /\[\s*\]\s*=/" | wc -l
echo "##  char array with any size (ex. char bbb[20];)               : \c"
cat $logfilearray | perl -ne "print if ! /\[\s*\]\s*=/ and ! /char\s*\*/" | wc -l
echo "##  char pointer             (ex. char *ccc)                   : \c"
cat $logfilearray | perl -ne "print if /char\s*\*/" | wc -l
echo


echo "2. char pointer definition search"
echo "output to logfile: $logfilepointer"

for i in `cat $filelist`
do
        outname=`echo  $i | sed 's/\//\\\\\\//g'`

        grep -n -e '\=.*char.*malloc' \
                -e '\=.*char.*calloc' \
                -e '\=.*char.*alloca' \
                -e '[^")][[:blank:]]*malloc' \
                -e '[^")][[:blank:]]*calloc' \
                -e '[^")][[:blank:]]*alloca' $i | \
        grep -v ":#include" | \
        sed -e "s/^/$outname:/" -e "s/	/ /g" | sed "s/:\([0-9]*\):/	\1	/" >> $logfilepointer;
done

echo "## Result:"
echo "##  char pointer memory allocation  (ex. ccc = malloc( 20 ))   : \c"
cat $logfilepointer | wc -l
echo

echo "finish."

